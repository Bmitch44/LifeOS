"""updated activies table

Revision ID: 5aa7acc89883
Revises: 4d348f3385a5
Create Date: 2025-09-21 15:23:16.158156

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '5aa7acc89883'
down_revision: Union[str, Sequence[str], None] = '4d348f3385a5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('snaptrade_activity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clerk_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.Column('activity_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('symbol_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('option_symbol_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tyoe', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('option_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('units', sa.Float(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('trade_date', sa.DateTime(), nullable=True),
    sa.Column('settlement_date', sa.DateTime(), nullable=True),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('fees', sa.Float(), nullable=True),
    sa.Column('fx_rate', sa.Float(), nullable=True),
    sa.Column('institution', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['snaptrade_account.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_snaptrade_activity_clerk_user_id'), 'snaptrade_activity', ['clerk_user_id'], unique=False)
    # If any legacy string values are non-numeric, set them to NULL to allow casting
    op.execute("UPDATE snaptrade_account SET connection_id = NULL WHERE connection_id IS NOT NULL AND connection_id !~ '^[0-9]+$'")
    # Change column type with explicit USING for Postgres
    op.alter_column(
        'snaptrade_account',
        'connection_id',
        existing_type=sa.VARCHAR(),
        type_=sa.Integer(),
        existing_nullable=True,
        postgresql_using='connection_id::integer',
    )
    op.create_index(op.f('ix_snaptrade_account_account_id'), 'snaptrade_account', ['account_id'], unique=True)
    op.create_foreign_key(None, 'snaptrade_account', 'snaptrade_connection', ['connection_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'snaptrade_account', type_='foreignkey')
    op.drop_index(op.f('ix_snaptrade_account_account_id'), table_name='snaptrade_account')
    op.alter_column('snaptrade_account', 'connection_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_index(op.f('ix_snaptrade_activity_clerk_user_id'), table_name='snaptrade_activity')
    op.drop_table('snaptrade_activity')
    # ### end Alembic commands ###
